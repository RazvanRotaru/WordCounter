/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "tema.h"
#include <unordered_map>
#include <fstream>
#include <cstring>

//use local hash 
//use fisier hardcodat

// file = The Star by Arthur C. Clarke (TheStar.txt)

#define __YES_APPEND__ "YES APPEND"
#define __YES_SEARCH__ "YES SEARCH"
#define __NO__ "NO"
#define __LEN__ 10
#define __NLEN__ 2
#define __NONE__ 0
#define __APPEND__ 1
#define __SEARCH__ 2


std::unordered_map<std::string, int> word_no;
std::unordered_map<int, int> letters_no;
std::string filename = "file.txt";
bool loaded = false;
int command_accepted = 0;

void remove_symbols(std::string& s)
{
	if (!isalnum(s.c_str()[s.length() - 1]))
		s = s.substr(0, s.length() - 1);
}

bool is_number(const std::string& s)
{
    std::string::const_iterator it = s.begin();
    while (it != s.end() && std::isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}

char **
send_message_1_svc(message *argp, struct svc_req *rqstp)
{
	static char * result;
	std::string word;

	// parse file and update hash when server starts  
	if (!loaded) {
		std::fstream file;

		file.open(filename.c_str());

		while (file >> word) {
			remove_symbols(word);
			word_no[word] += 1;
			letters_no[word.length()] += 1;
		}

		file.close();
		loaded = true;
	}
	/*
	 * insert server code here
	 */

	// get data from argp
	
	std::string command = argp->command;

	word = argp->word;

	if (command.compare("APPEND") == 0) {
		if (command_accepted == __NONE__) {
			result = new char[__LEN__ + 1];
			std::strcpy(result, __YES_APPEND__);
			command_accepted = __APPEND__;
		}
		else if (command_accepted == __APPEND__) {
			std::string ans;
			
			if (!word.empty()) {
				word_no[word] += 1;
				letters_no[word.length()] += 1;
				ans = "succes la adaugare " + std::to_string(word_no[word]);
			}
			else
				ans = "adugare esuata"; 
			
			result = new char[ans.length() + 1];
			std::strcpy(result, ans.c_str());
			command_accepted = __NONE__;
		}

	}
	else if (command.compare("SEARCH") == 0) {
		if (command_accepted == __NONE__) {
			command_accepted = __SEARCH__;
			result = new char[__LEN__ + 1];
			std::strcpy(result, __YES_SEARCH__);
		}
		else if (command_accepted == __SEARCH__) {
			std::string ans;
			if (is_number(word))
				ans = std::to_string(letters_no[std::stoi(word)]) 
						+ " cuvinte cu acelasi numar de caractere";
			else
				ans = word + " " + std::to_string(word_no[word]);

			result = new char[ans.length() + 1];
			std::strcpy(result, ans.c_str());
			command_accepted = __NONE__;
		}
	}
	else {
		result = new char[__NLEN__ + 1];
		std::strcpy(result, __NO__);
	}

	return &result;
}
